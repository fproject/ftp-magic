<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:ftp="pl.maliboo.ftp.core.*"
		title="HomeView"
		creationComplete="creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import flash.filesystem.File;
			
			import mx.collections.ArrayList;
			import mx.core.IDataRenderer;
			import mx.events.FlexEvent;
			
			import net.projectkit.ftp.FTPClientApp;
			
			import pl.maliboo.ftp.FTPFile;
			import pl.maliboo.ftp.core.FTPClient;
			import pl.maliboo.ftp.events.FTPEvent;
			import pl.maliboo.ftp.utils.ConsoleListener;
			
			private var list:ConsoleListener;
			
			private function get client():FTPClient
			{
				return clientApp.client;
			}
			
			private function get clientApp():FTPClientApp
			{
				return FTPClientApp.instance;
			}
			
			private function initClientHandlers():void
			{
				client.addEventListener(FTPEvent.CONNECTED, handleConnected);
				client.addEventListener(FTPEvent.LOGGED, handleLogged);
				client.addEventListener(FTPEvent.LISTING, handleListing);
				client.addEventListener(FTPEvent.CHANGE_DIR, handleCD);
			}
			
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				initClientHandlers();
				makeConnection();
			}
			
			public function makeConnection ():void
			{
				if (list == null)
					list = new ConsoleListener(client, output);
				this.addElement(output);
				this.callLater(client.connect,[clientApp.site.host, clientApp.site.port]);
			}
			
			public function handleConnected (evt:FTPEvent):void
			{
				client.login(clientApp.loginUser.name, clientApp.loginUser.password);
			}
			
			public function handleLogged (evt:FTPEvent):void
			{
				client.list();
			}
			
			public function handleCD (evt:FTPEvent):void
			{
				client.list();
			}
			
			public function handleListing(evt:FTPEvent):void
			{
				fileList.dataProvider = new ArrayList(evt.listing);
				this.removeElement(output);
			}
			
			/*
			public function makeKaszana (evt:FTPEvent):void
			{
			trace("Robie kaszane!")
			client.removeEventListener(evt.type, arguments.callee);
			client.sendCommand(new FTPCommand("NIMA!"));
			}
			*/
			
			public function handleDGDoubleClick (evt:Event):void
			{
				var file:FTPFile = (evt.target as IDataRenderer).data as FTPFile;
				if (file.isDir)
				{
					client.cwd(file.name);
				}
				else
				{
					//client.getFile(file.fullPath, (localDir.selectedItem as File).nativePath+file.name);
				}
			}
			
			public function handleFileSystemDC (evt:Event):void
			{
				var file:File = (evt.target.parent as IDataRenderer).data as File;
				if (!file.isDirectory)
					client.putFile(file.nativePath, client.workingDirectory+"/"+file.name);
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:TextArea id="output" top="0" bottom="0" left="0" right="0"/>
	</fx:Declarations>
	<s:List id="fileList" top="0" bottom="0" left="0" right="0"/>
	
</s:View>
